apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId "com.nicholasdoglio.eyebleach"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "0.0.0.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}

ext {
    espresso = "2.2.2"
    support = "27.0.2"
    constraint = "1.1.0-beta4"
    glide = "4.5.0"
    retrofit = "2.3.0"
    moshi = "1.5.0"
    rxJava = "2.1.9"
    rxAndroid = "2.0.1"
    rxbinding = "2.0.0"
    rxKotlin = "2.2.0"
    dagger = "2.14.1"
    paging = "1.0.0-alpha5"
    archComponents = "1.1.0"
    room = "1.1.0-alpha1"
    junit = "4.12"
    mockito = "2.13.0"
    robo = "3.6.1"
    okhttp = "3.9.0"
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    //Android
    implementation "com.android.support:appcompat-v7:$support"
    implementation "com.android.support:support-v4:$support"
    implementation "com.android.support:recyclerview-v7:$support"
    implementation "com.android.support.constraint:constraint-layout:$constraint"

    //Glide
    implementation "com.github.bumptech.glide:glide:$glide"
    kapt "com.github.bumptech.glide:compiler:$glide"
    implementation("com.github.bumptech.glide:recyclerview-integration:$glide") {
        transitive = false
    }

    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit"

    //Moshi
    implementation "com.squareup.moshi:moshi:$moshi"

    //Rx
    implementation "io.reactivex.rxjava2:rxjava:$rxJava"
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroid"
    implementation "com.jakewharton.rxbinding2:rxbinding-kotlin:$rxbinding"
    implementation "io.reactivex.rxjava2:rxkotlin:$rxKotlin"

    //Dagger
    implementation "com.google.dagger:dagger:$dagger"
    implementation "com.google.dagger:dagger-android:$dagger"
    implementation "com.google.dagger:dagger-android-support:$dagger"
    kapt "com.google.dagger:dagger-compiler:$dagger"
    kapt "com.google.dagger:dagger-android-processor:$dagger"

    //Android Architecture Components
    implementation "android.arch.paging:runtime:$paging"
    implementation "android.arch.lifecycle:common-java8:$archComponents"
    implementation "android.arch.lifecycle:extensions:$archComponents"
    implementation "android.arch.lifecycle:reactivestreams:$archComponents"
    implementation "android.arch.persistence.room:runtime:$room"
    implementation "android.arch.persistence.room:rxjava2:$room"
    kapt "android.arch.persistence.room:compiler:$room"

    //Testing
    testImplementation "com.squareup.retrofit2:retrofit-mock:$retrofit"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttp"
    testImplementation "junit:junit:$junit"
    testImplementation "org.mockito:mockito-core:$mockito"
    testImplementation "org.robolectric:robolectric:$robo"
    testImplementation "android.arch.core:core-testing:$archComponents"
    testImplementation "android.arch.persistence.room:testing:$room"
    androidTestImplementation("com.android.support.test.espresso:espresso-core:$espresso", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

jacoco {
    toolVersion = "0.8.0"
    reportsDir = file("$buildDir/reports")
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/test/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree], [kotlinDebugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec"
    ])
}